plugins {
	id 'checkstyle'
	id 'java-library'
	id 'java-test-fixtures'
}

configurations {
	proGuard
}

dependencies {
	implementation libs.bundles.asm

	implementation libs.vineflower
	implementation libs.cfr
	implementation libs.procyon

	proGuard libs.proguard

	testImplementation libs.jimfs
}

// Generate "version.txt" file

ext.genOutputDir = file("$buildDir/generated-resources")

task generateVersionFile {
	ext.outputFile = file("$genOutputDir/version.properties")
	inputs.property("version", project.version)
	inputs.property("vineflower-version", libs.vineflower.get().versionConstraint.displayName)
	inputs.property("cfr-version", libs.cfr.get().versionConstraint.displayName)
	inputs.property("procyon-version", libs.procyon.get().versionConstraint.displayName)

	outputs.file(outputFile)
	doLast {
		outputFile.text = inputs.properties.entrySet()
				.collect { "$it.key = $it.value" }.join("\n")
	}
}

sourceSets.main.output.dir genOutputDir, builtBy: generateVersionFile

// Generate obfuscated JARs for tests
// If your test fails for class file version problem with proguard, run gradle with -Dorg.gradle.java.home="<older jdk>" flag
def registerTestJarTasks(String name, String... input) {
	def libraryJarsArg = "<java.home>/jmods/java.base.jmod(!**.jar;!module-info.class)"

	tasks.register("${name}TestJar", Jar.class) {
		group("test-setup")
		from(sourceSets.test.output) {
			include input
		}

		archiveFileName = "${name}.jar"
		destinationDirectory = file('build/test-inputs')
	}

	var confFile = 'src/test/resources/proguard-test.conf'
	if (file("src/test/resources/proguard-$name-test.conf").exists()) {
		confFile = "src/test/resources/proguard-$name-test.conf"
	}

	tasks.register("${name}TestObf", JavaExec.class) {
		group("test-setup")
		dependsOn("${name}TestJar")
		mainClass = 'proguard.ProGuard'
		classpath configurations.proGuard

		args "@$confFile", '-injars', file("build/test-inputs/${name}.jar"),
				'-libraryjars', libraryJarsArg,
				'-outjars', file("build/test-obf/${name}.jar")
				//'-printmapping', file("build/test-obf/${name}.txt")
	}
}

registerTestJarTasks("complete", "cuchaz/enigma/inputs/**/*.class")
test.dependsOn("completeTestObf")

file('src/test/java/cuchaz/enigma/inputs').listFiles().each { f ->
	if (f.directory) {
		registerTestJarTasks(f.name, "cuchaz/enigma/inputs/$f.name/**/*.class", "cuchaz/enigma/inputs/Keep.class")
		test.dependsOn("${f.name}TestObf")
	}
}

publishing {
	publications {
		"$project.name"(MavenPublication) {
			groupId project.group
			artifactId project.name
			version project.version
			from components.java
		}
	}
}
