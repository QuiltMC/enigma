import org.gradle.api.internal.ConventionMapping
import quilt.internal.task.ProGuardExecTask

import java.util.stream.Stream

plugins {
	id 'checkstyle'
	id 'java-library'
	id 'java-test-fixtures'
}

configurations {
	proGuard
}

dependencies {
	implementation libs.bundles.asm

	implementation libs.vineflower
	implementation libs.cfr
	implementation libs.procyon

	implementation libs.quilt.config

	proGuard libs.proguard

	testImplementation libs.jimfs

	testFixturesImplementation libs.asm
	testFixturesImplementation libs.asm.tree
}

// Generate "version.txt" file

ext.genOutputDir = file("$buildDir/generated-resources")

task generateVersionFile {
	ext.outputFile = file("$genOutputDir/version.properties")
	inputs.property("version", project.version)
	inputs.property("vineflower-version", libs.vineflower.get().versionConstraint.displayName)
	inputs.property("cfr-version", libs.cfr.get().versionConstraint.displayName)
	inputs.property("procyon-version", libs.procyon.get().versionConstraint.displayName)

	outputs.file(outputFile)
	doLast {
		outputFile.text = inputs.properties.entrySet()
				.collect { "$it.key = $it.value" }.join("\n")
	}
}

sourceSets.main.output.dir genOutputDir, builtBy: generateVersionFile

static String convertToGradleTaskName(String name) {
	String newName = new String(name);

	for (int i = 0; i < name.length(); i++) {
		if (name.charAt(i) == '_') {
			var toReplace = '_' + name.charAt(i + 1)
			var newChar = name.charAt(i + 1).toUpperCase().toString()
			newName = newName.replace(toReplace, newChar)
		}
	}

	return newName
}

// Generate obfuscated JARs for tests
// If your test fails for class file version problem with proguard, run gradle with -Dorg.gradle.java.home="<older jdk>" flag
def registerTestJarTasks(String name, String... input) {
	String taskName = convertToGradleTaskName(name)
	def libraryJarsArg = "<java.home>/jmods/java.base.jmod(!**.jar;!module-info.class)"

	final testJarTask = tasks.register("${taskName}TestJar", Jar.class) {
		group("test-setup")
		from(sourceSets.test.output) {
			include input
		}

		archiveFileName = "${name}.jar"
		destinationDirectory = file('build/test-inputs')
	}

	var confFileArg = 'src/test/resources/proguard-test.conf'
	if (file("src/test/resources/proguard-$name-test.conf").exists()) {
		confFileArg = "src/test/resources/proguard-$name-test.conf"
	}

	tasks.register("${taskName}TestObf", ProGuardExecTask) {
		group("test-setup")
		classpath configurations.proGuard

		confFile = confFileArg

		libraryJars = libraryJarsArg

		inJar = testJarTask.get().archiveFile

		outJar = file("build/test-obf/${name}.jar")
	}
}

registerTestJarTasks("complete", "org/quiltmc/enigma/input/**/*.class")
test.dependsOn("completeTestObf")

file('src/test/java/org/quiltmc/enigma/input').listFiles().each { f ->
	if (f.directory) {
		String taskName = convertToGradleTaskName(f.name)

		registerTestJarTasks(f.name, "org/quiltmc/enigma/input/$f.name/**/*.class", "org/quiltmc/enigma/input/Keep.class")
		test.dependsOn("${taskName}TestObf")
	}
}

publishing {
	publications {
		"$project.name"(MavenPublication) {
			groupId project.group
			artifactId project.name
			version project.version
			from components.java
		}
	}
}
