import com.formdev.flatlaf.FlatDarculaLaf
import com.formdev.flatlaf.FlatDarkLaf
import com.formdev.flatlaf.FlatLightLaf
import quilt.internal.task.PrintColorKeyGroupsMapCodeTask

import javax.swing.LookAndFeel
import javax.swing.UIManager

import javax.swing.plaf.metal.MetalLookAndFeel

buildscript {
	dependencies {
		classpath(libs.flatlaf)
	}
}

plugins {
	id 'application'
	id 'checkstyle'
	id 'java-library'
	alias(libs.plugins.shadow)
}

dependencies {
	implementation project(':enigma')
	implementation project(':enigma-server')

	implementation libs.syntaxpain
	implementation libs.jopt
	implementation libs.flatlaf
	implementation libs.flatlaf.extras // for SVG icons
	implementation libs.bundles.quilt.config
	implementation libs.swing.dpi
	implementation libs.fontchooser
	testImplementation(testFixtures(project(':enigma')))
}

application {
	mainClass = 'org.quiltmc.enigma.gui.Main'
	jar.manifest.attributes 'Main-Class': mainClass
}

static String convertToGradleTaskName(String name) {
	String newName = new String(name)

	for (int i = 0; i < name.length(); i++) {
		if (name.charAt(i) == '_') {
			var toReplace = '_' + name.charAt(i + 1)
			var newChar = name.charAt(i + 1).toUpperCase().toString()
			newName = newName.replace(toReplace, newChar)
		}
	}

	return newName
}

def registerTestTask(String name) {
	String taskName = convertToGradleTaskName(name)

	tasks.register("${taskName}TestGui", JavaExec.class) {
		group("test")
		dependsOn(":enigma:${taskName}TestObf")
		dependsOn(":enigma:processResources")
		mainClass = application.mainClass
		classpath = sourceSets.test.runtimeClasspath

		def jar = project(":enigma").file("build/test-obf/${name}.jar")
		def profile = project(":enigma").file("build/resources/testFixtures/profile.json")
		def mappings = file("mappings/${name}")
		args('-jar', jar, '-mappings', mappings, '-profile', profile, '--development')
		doFirst {
			mappings.mkdirs()
		}
	}

	tasks.register("${taskName}TestGui2", JavaExec.class) {
		group("test")
		dependsOn(":enigma:${taskName}TestObf")
		mainClass = application.mainClass
		classpath = sourceSets.test.runtimeClasspath

		def jar = project(":enigma").file("build/test-obf/${name}.jar")
		def profile = project(":enigma").file("build/resources/testFixtures/profile.json")
		def mappings = file("mappings/${name}2")
		args('-jar', jar, '-mappings', mappings, '-profile', profile, '--development')
		doFirst {
			mappings.mkdirs()
		}
	}
}

project(":enigma").file("src/test/java/org/quiltmc/enigma/input").listFiles().each {
	if (it.directory) {
		registerTestTask(it.name)
	}
}

registerTestTask("complete")

void registerPrintColorKeyGroupsMapCode(String lafsName, LookAndFeel... lookAndFeels) {
	tasks.register("print" + lafsName + "ColorKeyGroupsMapCode", PrintColorKeyGroupsMapCodeTask) { task ->
		task.lookAndFeels = lookAndFeels as List
	}
}

registerPrintColorKeyGroupsMapCode("Combined",
	UIManager.getLookAndFeel(),
	new MetalLookAndFeel(),
	new FlatLightLaf(),
	new FlatDarkLaf(),
	new FlatDarculaLaf()
)

registerPrintColorKeyGroupsMapCode("None", UIManager.getLookAndFeel())

registerPrintColorKeyGroupsMapCode("Metal", new MetalLookAndFeel())

registerPrintColorKeyGroupsMapCode("FlatLight", new FlatLightLaf())

registerPrintColorKeyGroupsMapCode("FlatDark", new FlatDarkLaf())

registerPrintColorKeyGroupsMapCode("FlatDarcula", new FlatDarculaLaf())

publishing {
	publications {
		"$project.name"(MavenPublication) {
			groupId project.group
			artifactId project.name
			version project.version
			from components.java
		}
	}
}
